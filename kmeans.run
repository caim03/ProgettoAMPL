reset;
option randseed 0;

model Progetto/ProgettoAMPL/kmeans.mod;
data Progetto/ProgettoAMPL/nuovonuovo.dat;

let file_tr := "Progetto/ProgettoAMPL/cleaned_training.txt";
# Read training set
read Ptr < (file_tr);

read{k in 1..Ptr} (xtr[k,1], xtr[k,2], xtr[k,3], xtr[k,4], xtr[k,5], xtr[k,6],
    xtr[k,7], xtr[k,8], xtr[k,9], xtr[k,10], xtr[k,11],
    xtr[k,12], xtr[k,13], xtr[k,14], xtr[k,15], xtr[k,16],
    xtr[k,17], xtr[k,18], xtr[k,19], xtr[k,20], xtr[k,21],
    xtr[k,22], xtr[k,23], xtr[k,24], xtr[k,25], xtr[k,26],
    xtr[k,27], xtr[k,28], xtr[k,29], xtr[k,30], xtr[k,31],
    xtr[k,32], xtr[k,33], xtr[k,34], xtr[k,35], xtr[k,36],
    xtr[k,37], xtr[k,38], xtr[k,39], xtr[k,40], xtr[k,41],
    xtr[k,42], xtr[k,43], xtr[k,44], xtr[k,45], ytr[k]) < (file_tr);


let nl:=3;
let output := "Progetto/ProgettoAMPL/kMeansCentroid/kMeansCentroids_"&nl&".txt";



for {i in 1..ingr}{
    let lb[i] := min{j in 1..Ptr}xtr[j,i];
}

for {i in 1..ingr}{
    let ub[i] := max{j in 1..Ptr}xtr[j,i];
}

for {i in 1..ingr}
{
if(i==3 || i==7 || i==8 || i==9 || i==10 || i==11|| i==20 || i==21 || i==22
|| i==23 || i==24 || i==25 || i==43 || i==44 || i==45) then {
  let {k in 1..Ptr} xtr[k,i]:=2.0*((xtr[k,i]-lb[i])/(ub[i]-lb[i])-0.5);
}
}

#Calculate distance matrix
for {i in 1..Ptr, j in 1..Ptr} {
 let distance_matrix[i,j] := sqrt(sum {k1 in 1..ingr} (xtr[i,k1] - xtr[j,k1])^2)}
option solver "./cplex";
solve;
option display_1col 0, display_transpose -10;

for{k in 1..Ptr}
{
  if(binary_matrix[k,k] == 1) then
    {
      display k;
      printf{i in 1..ingr} "%f\n ",xtr[k,i] > (output);
    }


}

#read{k in 1..nl,i in 1..ingr} (c[k,i]) < (output);

#display{k in 1..nl,i in 1..ingr} c[k,i];
