reset;
option randseed 0;

model Progetto/ProgettoAMPL/RBFDecomposition.mod;
data Progetto/ProgettoAMPL/nuovonuovo.dat;

let file_tr := "Progetto/ProgettoAMPL/cleaned_training.txt";
let file_val := "Progetto/ProgettoAMPL/cleaned_validation.txt";
let file_log := "Progetto/ProgettoAMPL/file_log.txt";
let bestV := "Progetto/ProgettoAMPL/bestResults/best_v.txt";
let bestC := "Progetto/ProgettoAMPL/bestResults/best_c.txt";



let err_tr := 1.e30;
let err_v := 1.e30;
let epsilon := 1.e-6;

let nmax := 10;
let nl := 3;
let best_nl := nl;
let gamma := 1.e-6;
let sigma:=0.01;

let stop_tr := 0;



# Read training set
read Ptr < (file_tr);
read{k in 1..Ptr} (xtr[k,1], xtr[k,2], xtr[k,3], xtr[k,4], xtr[k,5], xtr[k,6],
    xtr[k,7], xtr[k,8], xtr[k,9], xtr[k,10], xtr[k,11],
    xtr[k,12], xtr[k,13], xtr[k,14], xtr[k,15], xtr[k,16],
    xtr[k,17], xtr[k,18], xtr[k,19], xtr[k,20], xtr[k,21],
    xtr[k,22], xtr[k,23], xtr[k,24], xtr[k,25], xtr[k,26],
    xtr[k,27], xtr[k,28], xtr[k,29], xtr[k,30], xtr[k,31],
    xtr[k,32], xtr[k,33], xtr[k,34], xtr[k,35], xtr[k,36],
    xtr[k,37], xtr[k,38], xtr[k,39], xtr[k,40], xtr[k,41],
    xtr[k,42], xtr[k,43], xtr[k,44], xtr[k,45], ytr[k]) < (file_tr);

# Read validation set
read Pv < (file_val);
read{k in 1..Pv} (xv[k,1], xv[k,2], xv[k,3], xv[k,4], xv[k,5], xv[k,6],
  xv[k,7], xv[k,8], xv[k,9], xv[k,10], xv[k,11],
  xv[k,12], xv[k,13], xv[k,14], xv[k,15], xv[k,16],
  xv[k,17], xv[k,18], xv[k,19], xv[k,20], xv[k,21],
  xv[k,22], xv[k,23], xv[k,24], xv[k,25], xv[k,26],
  xv[k,27], xv[k,28], xv[k,29], xv[k,30], xv[k,31],
  xv[k,32], xv[k,33], xv[k,34], xv[k,35], xv[k,36],
  xv[k,37], xv[k,38], xv[k,39], xv[k,40], xv[k,41],
  xv[k,42], xv[k,43], xv[k,44], xv[k,45] , yv[k]) < (file_val);

# Scaling data
let lb_f := min{i in 1..Ptr}ytr[i];
let ub_f := max{i in 1..Ptr}ytr[i];

for {i in 1..ingr}{
    let lb[i] := min{j in 1..Ptr}xtr[j,i];
}

for {i in 1..ingr}{
    let ub[i] := max{j in 1..Ptr}xtr[j,i];
}

for {i in 1..ingr}
{
if(i==3 || i==7 || i==8 || i==9 || i==10 || i==11|| i==20 || i==21 || i==22
|| i==23 || i==24 || i==25 || i==43 || i==44 || i==45) then {
  let {k in 1..Ptr} xtr[k,i]:=((xtr[k,i]-lb[i])/(ub[i]-lb[i]));
  let {k in 1..Pv} xv[k,i]:=((xv[k,i]-lb[i])/(ub[i]-lb[i]));
}
}

let {i in 1..Ptr} ytr[i]:=((ytr[i]-lb_f)/(ub_f-lb_f));
let {i in 1..Pv} yv[i]:=((yv[i]-lb_f)/(ub_f-lb_f));



repeat while (stop_tr == 0){
    printf "------------------------------------------------------\n" > (file_log);
    printf "training of the nn with %d neurons in the hidden layer\n", nl > (file_log);
    printf "------------------------------------------------------\n" > (file_log);

    let loc_err_tr := 1.e30;
    let loc_err_v := 1.e30;

    #let file_centroids := "Progetto/ProgettoAMPL/kMeansCentroid/kMeansCentroids_"&nl&".txt";
    #read{i in 1..nl,h in 1..ingr} (init_centroids[i,h]) < (file_centroids);


    for{k in 1..nmax}{
        let{i in 1..nl} v[i] := Uniform(-10, 10);
        #let{i in 1..nl,h in 1..ingr} c[i,h] := init_centroids[i,h];
        for{i in 1..nl} {

          let boh := round(Uniform(1,Ptr));

          let{h in 1..ingr} c[i,h] := xtr[boh,h];

        }

        let prec_err_tr:=1.e30;
        let prec_err_v:=1.e30;

        let loc_loc_err_tr := 1.e30;
        let loc_loc_err_v := 1.e30;


        let n_repeat := 0;
        repeat while(n_repeat==0)
        {

          # Calcolo della distanza massima tra due centri per il calcolo di sigma
          let dmax := 0;
          let times := 1;
          repeat while(times < nl){
              for{j in times+1..nl}{
                  let part_sum := sqrt(sum{s in 1..ingr}(c[times, s] - c[j, s])^2);
                  if (part_sum > dmax)then{
                      let dmax := part_sum;
                  }
              }
              let times := times + 1;
          }


          fix{a in 1..nl,b in 1..ingr} c[a,b];
          unfix{a in 1..nl} v[a];

          option solver './knitro';
          option knitro_options "opttol = 0.0001";
          solve;

          fix{a in 1..nl} v[a];
          unfix{a in 1..nl,b in 1..ingr} c[a,b];

          # Calcolo della distanza massima tra due centri per il calcolo di sigma
          let dmax := 0;
          let times := 1;
          repeat while(times < nl){
              for{j in times+1..nl}{
                  let part_sum := sqrt(sum{s in 1..ingr}(c[times, s] - c[j, s])^2);
                  if (part_sum > dmax)then{
                      let dmax := part_sum;
                  }
              }
              let times := times + 1;
          }

          option solver './knitro';
          option knitro_options "opttol = 0.0001";
          solve;
          #for{a in 1..nl}
          #{
#
#            if(a>1) then {
#              fix{b in 1..ingr} c[a-1,b];
#            }
#            unfix{b in 1..ingr} c[a,b];
#
#            # Calcolo della distanza massima tra due centri per il calcolo di sigma
#            let dmax := 0;
#            let times := 1;
#            repeat while(times < nl){
#                for{j in times+1..nl}{
#                    let part_sum := sqrt(sum{s in 1..ingr}(c[times, s] - c[j, s])^2);
#                    if (part_sum > dmax)then{
#                        let dmax := part_sum;
#                    }
#                }
#                let times := times + 1;
#            }
#
#            solve;
#          }



          if ( abs(Error_tr - prec_err_tr)/(1 + prec_err_tr) > epsilon) then {
              printf "Iterazione decomposizione: old %f new %f\n", prec_err_tr, Error_tr >> (file_log);
              let prec_err_tr:= Error_tr;

              if(Error_v < loc_loc_err_v) then
                {
                  let loc_loc_err_v:=Error_v;
                  let loc_loc_err_tr:=Error_tr;
                  let{i in 1..nl} loc_loc_best_v[i] := v[i];
                  let{i in 1..nl,j in 1..ingr} loc_loc_best_c[i,j] := c[i,j];
                }
              let n_repeat := 0;
          }
          else
          {
            let n_repeat := 1;
          }

        }

        if (loc_loc_err_v < loc_err_v) then {
            printf "Miglioramento Errore Validation: old %f new %f\n", loc_err_v, loc_loc_err_v >> (file_log);
            let loc_err_v := loc_loc_err_v;
            let loc_err_tr := loc_loc_err_tr;

            let{i in 1..nl} loc_best_v[i] := loc_loc_best_v[i];
            let{i in 1..nl,j in 1..ingr} loc_best_c[i,j] := loc_loc_best_c[i,j];
        }
    }


        if (loc_err_v < err_v) then{
            printf "L'errore migliore sul validation set è %f con %d neuroni\n", loc_err_v, nl >> (file_log);

            let best_nl := nl;

            let{i in 1..nl} best_v[i] := loc_best_v[i];
            let{i in 1..nl,j in 1..ingr} best_c[i,j] := loc_best_c[i,j];
            let nl := nl + 1;
            let err_v := loc_err_v;
            let err_tr := loc_err_tr;
        }
        else {
            let stop_tr := 1;
        }
}

printf "Il migliore validation error è: %f, con training error: %f, con %d neuroni,", err_v, err_tr, best_nl >> (file_log);


printf{i in 1..best_nl} "%f\n", best_v[i] >> (bestV);
printf{i in 1..best_nl,j in 1..ingr} "%f\n", best_c[i,j] >> (bestC);
