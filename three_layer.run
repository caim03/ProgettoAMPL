reset;
option randseed 0;

model Progetto/ProgettoAMPL/three_layer.mod;
data Progetto/ProgettoAMPL/scuola.dat;

let file_tr := "Progetto/ProgettoAMPL/cleaned_training.txt";
let file_val := "Progetto/ProgettoAMPL/cleaned_validation.txt";
let file_log := "Progetto/ProgettoAMPL/file_log.txt";

let gamma := 0.001;
let nl1 := 3;
let nl2 := 3;
let best_nl1 := nl1;
let best_nl2 := nl2;
let err_tr := 1.e30;
let err_v := 1.e30;
let stop_tr1 := 0;
let stop_tr2 := 0;
let nmax := 10;


# Read training set
read Ptr < (file_tr);
read{k in 1..Ptr} (xtr[k,1], xtr[k,2], xtr[k,3], xtr[k,4], xtr[k,5], xtr[k,6],
    xtr[k,7], xtr[k,8], xtr[k,9], xtr[k,10], xtr[k,11],
    xtr[k,12], xtr[k,13], xtr[k,14], xtr[k,15], xtr[k,16],
    xtr[k,17], xtr[k,18], xtr[k,19], xtr[k,20], xtr[k,21],
    xtr[k,22], xtr[k,23], xtr[k,24], xtr[k,25], xtr[k,26],
    xtr[k,27], ytr[k]) < (file_tr);

# Read validation set
read Pv < (file_val);
read{k in 1..Pv} (xv[k,1], xv[k,2], xv[k,3], xv[k,4], xv[k,5], xv[k,6],
  xv[k,7], xv[k,8], xv[k,9], xv[k,10], xv[k,11],
  xv[k,12], xv[k,13], xv[k,14], xv[k,15], xv[k,16],
  xv[k,17], xv[k,18], xv[k,19], xv[k,20], xv[k,21],
  xv[k,22], xv[k,23], xv[k,24], xv[k,25], xv[k,26],
  xv[k,27], yv[k]) < (file_val);

repeat while (stop_tr1 == 0){
    repeat while (stop_tr2 == 0){
        printf "------------------------------------------------------\n" > (file_log);
        printf "training of the nn with %d neurons 1 and %d neurons 2 in the hidden layer\n", nl1, nl2 > (file_log);
        printf "------------------------------------------------------\n" > (file_log);

        let loc_err_tr := 1.e30;
        let loc_err_v := 1.e30;

        for{k in 1..nmax}{
            let{i in 1..ingr+1, j in 1..nl1} win[i,j] := Uniform(-10, 10);
            let{i in 1..nl2} v[i] := Uniform(-10, 10);
            let{i in 1..nl1+1, j in 1..nl2} l[i,j] := Uniform(-10, 10);

            option solver './knitro';
            option knitro_options "opttol = 0.0001";
            solve;

            if (Error_v <= loc_err_v) then {
                printf "Miglioramento Errore: old %f new %f\n", loc_err_v, Error_v >> (file_log);
                let loc_err_v := Error_v;
                let loc_err_tr := Error_tr;
            }
        }

        if (loc_err_v < err_v) then{
            printf "L'errore migliore sul validation set è %f con %d neuroni 1 e %d neuroni 2\n", loc_err_v, nl1, nl2 >> (file_log);

            let best_nl1 := nl1;
            let best_nl2 := nl2;
            let nl2 := nl2 + 1;
            let err_v := loc_err_v;
            let err_tr := loc_err_tr;
        }
        else {
            let stop_tr2 := 1;
        }
    }
    let nl1 := nl1 + 1;
    let nl2 := 3;
    let stop_tr2 := 0;

    if (nl1 == 10) then{
        let stop_tr1 := 1;
    }
}

printf "Il migliore errore in assoluto è %f\n", err_v >> (file_log);
